#!/usr/bin/env python
# -*- coding: utf-8 -*-


# web
from twisted.web.server import Site
from twisted.web.wsgi import WSGIResource
from twisted.internet import reactor
from flask import Flask, request, make_response

# parsing and formatting
from ConfigParser import SafeConfigParser
from jinja2 import Template 
from yattag import Doc, indent

# reddit
import praw
from praw.handlers import MultiprocessHandler

# misc
from uuid import uuid4
import time


# Specify, open, and read the config file.
INIFILE = 'config.ini'
parser = SafeConfigParser()
parser.read(INIFILE)

client_id = parser.get('config', 'id')
client_secret = parser.get('config', 'secret')
redirect_uri = parser.get('config', 'uri')
user_agent = parser.get('config', 'user-agent')


def dict_to_html(browser, links):
    """ Take the titles/links and build the HTML file. """
    doc, tag, text = Doc().tagtext()
    thetime = int(time.time())

    with tag('TITLE'):
        text('Bookmarks')
    with tag('H1'):
        text(browser)
    with tag('DL'):
        with tag('p'):
            doc.asis('<DT>')
            with tag('H3', ('ADD_DATE', thetime),
                    ('LAST_MDIFIED', thetime)):
                text('Reddit Bookmarks')
            with tag('DL'):
                with tag('p'):
                    ## Loop through each saved title/url pair in
                    ## saved_links and build a hyperlink for it. 
                    for title, url in links.iteritems():
                        doc.asis('<DT>')
                        with tag('A', ('HREF', url),
                                ('ADD_DATE', thetime), ('LAST_MODIFIED', thetime)):
                            text(title)
    
    ## Return the full html text.
    return indent(doc.getvalue())


def present_html(links):
    """ Add a header to the HTML text and then return it. """

    header = '<!DOCTYPE NETSCAPE-Bookmark-file-1>' + '\n' + \
             '<!-- This file was automatically generated by redditsaver. -->' + \
             '<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">'
    d = dict_to_html('Bookmarks Menu', links)
    output = header + d.encode('ascii', 'replace')
    return output


app = Flask(__name__)
@app.route('/')
def www_homepage():
    """ Run this method when the homepage is called. """

    # TODO: Implement some state-checking functionality.
    state = str(uuid4())

    # Generate the authentication URL for the user to click on.
    link = r.get_authorize_url(state, scope='identity history')
    link = '<a href=%s>click here</a>' % link

    # Open the index.html file, and insert the above link into it.
    f = open('index.html', 'r')
    data = f.read()
    template = Template(data)
    out = template.render(link=link)

    # Return the index.html page to be viewed.
    return out


@app.route('/reddit_callback')
def www_authorized():
    """ Run this method once the user has authorized the app. """

    # Get the state and reddit's unique code for this session.
    # TODO: Implement some state-checking functionality.
    state = request.args.get('state', '')
    code = request.args.get('code', '')
    
    # Give reddit the code in exchange for an access token.
    info = r.get_access_information(code)

    # Get the user's saved links.
    saved = r.user.get_saved(limit=None)
    links = {}
    for thing in saved:
        if 'body' in dir(thing):
            # The link is a saved comment.
            a = 'Comment by: ' + str(thing.author)
            b = 'http://reddit.com/comments/' + str(thing.parent_id[3:]) + \
                '/_/' + str(thing.id) + '/'
            links.update({a: b})
        elif 'url' in dir(thing):
            # The link is either a self-post or an external link.
            links.update({thing.title: thing.url})

    # Convert the links to HTML and form a download request.
    html = present_html(links)
    response = make_response(html)
    response.headers["Content-Disposition"] = "attachment; filename=reddit-bookmarks.html"
    
    # Download the file.
    return response
    

def run_twisted():
    factory = Site(WSGIResource(reactor, reactor.getThreadPool(), app))
    reactor.listenTCP(8080, factory)
    reactor.run()


if __name__ == '__main__':
    handler = MultiprocessHandler()
    r = praw.Reddit(user_agent=user_agent, handler=handler)
    r.set_oauth_app_info(client_id, client_secret, redirect_uri)
    run_twisted()
